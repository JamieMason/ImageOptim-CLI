#!/bin/bash

# https://raw.githubusercontent.com/JamieMason/LICENSES/master/LICENSE-MIT

# ------------------------------------
# DEFAULT / ENVIRONMENT VARIABLES
# ------------------------------------

# current version of ImageOptim-CLI from package.json
VERSION="{{version}}"

# {DirectoryPath} Absolute file system path to this shell script.
CLI_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# {DirectoryPath} Absolute file system path to where this shell script was invoked from.
EXEC_PATH="$PWD"

# {FilePath} The location of our Applescript library file.
APPLESCRIPT_BIN="$CLI_PATH/imageOptimAppleScriptLib"

# {FilePath} The location of stat (see issue #59 with stat & homebrew)
STAT_BIN="/usr/bin/stat"

# {DirectoryPath} Where we'll copy all images to be processed, compared, then returned to their
# original locations.
TEMP_PATH="${TMPDIR}imageoptim-cli"

# {FilePath} A list of all images we'll be operating on.
INDEX_FILE="${TEMP_PATH}/index.txt"

# {FilePath[]} The original locations of every image to be processed.
INDEX_ARRAY=[]

# {Number} How many images in total being processed.
TOTAL_IMAGES=0

# {DirectoryPath|String} The optionally provided -d or --directory command line argument.
DIRECTORY_OPTION="false"

# {Number} Optinally overriden with -m or --min-quality
MIN_QUALITY="75"

# {BooleanString} Optionally use -s or --skip-if-larger with pngquant
SKIP_IF_LARGER="false"

# {BooleanString} Optionally overridden with -a or --image-alpha.
USE_IMAGE_ALPHA="false"

# {BooleanString} Optionally overridden with -j or --jpeg-mini.
USE_JPEGMINI="false"

# {BooleanString} Optionally overridden with -q or --quit.
QUIT_ON_COMPLETE="false"

# {RegEx} Supported file extensions for each application.
FILE_TYPES_REGEX_IMAGE_ALPHA=".*(png)$"
FILE_TYPES_REGEX_IMAGE_OPTIM=".*(bmp|gif|jpeg|jpg|pcx|png|pnm|tga|tiff)$"
FILE_TYPES_REGEX_JPEGMINI=".*(jpg|jpeg)$"

# {FilePath} Location of pngquant executable within ImageAlpha.
PNGQUANT_PATH="${CLI_PATH}/pngquant"

# {FilePath} Location of executable within ImageOptim.
IMAGEOPTIM_BIN_PATH="/Applications/ImageOptim.app/Contents/MacOS/ImageOptim"

# {BooleanString} Whether we can compare file quality afterwards, will be set to
# true accordingly during initialisation.
HAS_IMAGEMAGICK="false"

# {BooleanString} Whether to disable ANSI colour output.
NO_COLOR="false"

# {BooleanString} Whether to print detailed information about the optimizations
IS_VERBOSE="false"

# ------------------------------------
# LOGGING UTILS
# ------------------------------------

# Display a red error message and quit
# param  {String}  $1  message
function fatal {
  if [ $NO_COLOR == "false" ]; then
    printf "\e[31m✘ $1\033[0m\n"
  else
    echo "Error: $1"
  fi
  exit 1
}

# Display a message in green with a tick by it
# param  {String}  $1  message
function success {
  if [ $NO_COLOR == "false" ]; then
    printf "\e[32m✔ $1\033[0m\n"
  else
    echo "Success: $1"
  fi
}

# Display an info message
# param  {String}  $1  message
function info {
  if [ $NO_COLOR == "false" ]; then
    printf "\e[90m$1\e[39m\n"
  else
    echo $1
  fi
}

# Display a message in green
# param  {String}  $1  message
function format_green {
  if [ $NO_COLOR == "false" ]; then
    echo "\e[32m$1\e[39m"
  else
    echo $1
  fi
}

# Display a message in red
# param  {String}  $1  message
function format_red {
  if [ $NO_COLOR == "false" ]; then
    echo "\e[31m$1\e[39m"
  else
    echo $1
  fi
}

# Display usage information
function usage {
{{usage}}
}

# Display usage examples
function examples {
{{examples}}
}

# Display the before/after result of a file
# param  {String}  $1  label
# param  {Number}  $2  size_before
# param  {Number}  $3  size_after
# param  {Number}  $4  quality_loss
function render_result {
  let local savings=$2-$3
  local savings_percent=$(bc <<< "scale=2; $savings/$2 * 100")
  local size_before=$(format_red "$(toKb $2)kb")
  local size_after=$(format_green "$(toKb $3)kb")
  local savings=$(format_green "$(toKb $savings)kb")
  local savings_percent=$(format_green "$savings_percent%%")
  local quality_loss=$(bc <<< "scale=2; 100-$4")
  local quality_loss=$(format_green "$quality_loss%%")
  local output="$1 was: $size_before now: $size_after saving: $savings ($savings_percent)"
  if [[ $HAS_IMAGEMAGICK != "false" ]]; then
    local output="$output quality: $quality_loss"
  fi
  printf "$output\n"
}

# Display the before/after results of all files
function output_savings {
  local total_before=0
  local total_after=0
  local perfect_quality=0
  local actual_quality=0
  for source_file in "${INDEX_ARRAY[@]}"; do
    local image_type=$(get_image_type "$source_file")
    if [[ $image_type != "unsupported" ]]; then
      local temp_file=$(get_temp_path_for_file "$source_file")
      local size_before=$(sizeInBytes "$source_file")
      local size_after=$(sizeInBytes "$temp_file")
      let local total_before=$total_before+$size_before
      let local total_after=$total_after+$size_after
      local perfect_quality=$(bc <<< "scale=2; $perfect_quality+100")
      local quality_loss="false"
      if [[ $HAS_IMAGEMAGICK == "true" ]]; then
        local quality_loss=$(compare -metric MSE "$source_file" "$temp_file" /dev/null 2>&1 >/dev/null | awk '{print $1}')
        if [[ $quality_loss == *:* ]]; then
          quality_loss=0
        fi
        local actual_quality=$(bc <<< "scale=2; $actual_quality+$quality_loss")
      fi
      if [[ $IS_VERBOSE == "true" ]]; then
        render_result "$source_file" $size_before $size_after $quality_loss
      fi
    fi
  done
  render_result "TOTAL" $total_before $total_after $quality_loss
}

# ------------------------------------
# DETERMINE WHAT EXISTS AT A GIVEN LOCATION
# ------------------------------------

# State whether the entity at path is a "file", "directory", or "other".
# param   {EntityPath}  $1  entity
# return  {String}          file_type
function get_entity_type {
  if [ -f "$1" ]; then
    echo "file"
  elif [ -d "$1" ]; then
    echo "directory"
  else
    echo "other"
  fi
}

# State whether the entity at path is a "png", "jpg", "other", or "unsupported" image file.
# param   {EntityPath}  $1  entity
# return  {String}          image_type
function get_image_type {
  shopt -s nocasematch
  if [[ "$1" =~ $FILE_TYPES_REGEX_IMAGE_ALPHA ]]; then
    echo "png"
  elif [[ "$1" =~ $FILE_TYPES_REGEX_JPEGMINI ]]; then
    echo "jpg"
  elif [[ "$1" =~ $FILE_TYPES_REGEX_IMAGE_OPTIM ]]; then
    echo "other"
  else
    echo "unsupported"
  fi
  shopt -u nocasematch
}

# ------------------------------------
# GATHER PATHS TO IMAGES
# ------------------------------------

# Add file received via stdin to our index file.
# param  {FilePath}  $1  file
function add_file_to_index {
  local image_type=$(get_image_type "$1")
  if [ $image_type != "unsupported" ]; then
    echo "$1" >> $INDEX_FILE
  else
    info "Ignored as an unsupported file type: $LINE"
  fi
}

# Add all files in a directory to our index file.
# param  {DirectoryPath}  $1  directory
function add_directory_to_index {
  find -E "$1" -iregex $FILE_TYPES_REGEX_IMAGE_OPTIM -type f -print0 | while read -d '' -r file; do
    add_file_to_index "$file"
  done
}

# Read files received via stdin into an index which will outlive the LINE variable.
function add_stdin_to_index {
  if [ "$DIRECTORY_OPTION" == "false" ]; then
    while read LINE; do
      local entity_type=$(get_entity_type "$LINE")
      if [ $entity_type == "file" ]; then
        add_file_to_index "$LINE"
      elif [ $entity_type == "directory" ]; then
        add_directory_to_index "$LINE"
      else
        info "Ignored as neither file or directory: $LINE"
      fi
    done
  fi
}

# If -d or --directory were supplied, add the contents of that directory to our processing index.
function add_directory_option_to_index {
  if [ "$DIRECTORY_OPTION" != "false" ]; then
    if [ -d "$DIRECTORY_OPTION" ]; then
      add_directory_to_index "$DIRECTORY_OPTION"
    else
      fatal "Value for --directory is not a directory: $LINE"
    fi
  fi
}

# Remove any duplicate files in our index, which may have occurred when importing directories whose
# images have already been gathered by other means.
function remove_duplicate_indexes {
  sort -uf "$INDEX_FILE"  > "$INDEX_FILE.uniq.txt"
  mv "$INDEX_FILE.uniq.txt" "$INDEX_FILE"
}

# Check we actually got some files
# test -s means exists and size > zero
# See: man bash | less '+/^\s*CONDITIONAL'
function check_index_exists {
  if [ ! -s "$INDEX_FILE" ]; then
    fatal "No files found by the find command or in the provided directory"
  fi
}

# Read our index file into an Array.
function parse_index {
  IFS=$'\n' read -d '' -r -a INDEX_ARRAY < "$INDEX_FILE"
  TOTAL_IMAGES=${#INDEX_ARRAY[@]}
}

# Construct a clean Array containing sorted, unique paths to every image we should process.
function gather_paths_to_images {
  add_stdin_to_index
  add_directory_option_to_index
  check_index_exists
  remove_duplicate_indexes
  parse_index
}

# ------------------------------------
# PREPARE A TEMPORARY DIRECTORY
# ------------------------------------

function clean {
  rm -rf "$TEMP_PATH"
}

# Automating JPEGmini is particularily difficult and unusably slow when working with arbitrary sets
# of files. Instead, we create a temporary directory and pass that once to JPEGmini rather than
# each file individually.
function init_temp_directory {
  clean
  mkdir -p "$TEMP_PATH"
  chmod 777 "$TEMP_PATH"
}

# Get the absolute path of an entity
# param   {EntityPath}  $1  entity
# return  {EntityPath}      absolute_path
function to_absolute {
  local present_dir="$PWD"
  local file_dir=$(dirname "$1")
  local file_name=$(basename "$1")
  cd "$file_dir"
  local absolute_dir="$PWD"
  cd "$present_dir"
  echo "${absolute_dir}/${file_name}"
}

# Determine the location in our temp directory a given file should be held at.
# param   {FilePath}  $1  file
# return  {FilePath}      temp_file
function get_temp_path_for_file {
  local absolute_path=$(to_absolute "$1")
  local image_type=$(get_image_type "$absolute_path")
  echo "${TEMP_PATH}/${image_type}/$absolute_path"
}

# Copy all files received to a temp directory, grouped by file extension.
function populate_temp_directories {
  local image_type
  local temp_file
  for source_file in "${INDEX_ARRAY[@]}"; do
    image_type=$(get_image_type "$source_file")
    temp_file=$(get_temp_path_for_file "$source_file")
    if [[ $image_type != "unsupported" ]]; then
      ditto "$source_file" "$temp_file"
    fi
  done
}

# @TODO: DRY these two methods

# Copy all files received back to their original locations.
function replace_originals {
  local image_type
  local temp_file
  for source_file in "${INDEX_ARRAY[@]}"; do
    image_type=$(get_image_type "$source_file")
    temp_file=$(get_temp_path_for_file "$source_file")
    if [[ $image_type != "unsupported" ]]; then
      ditto "$temp_file" "$source_file"
      rm "$temp_file"
    fi
  done
}

# Gather paths to all images we should process and prepare a temporary directory containing copies.
function prepare_images {
  gather_paths_to_images
  if [ $TOTAL_IMAGES -gt 0 ]; then
    populate_temp_directories
  fi
}

function start {
  init_temp_directory
  prepare_images
}

function finish {
  replace_originals
  clean
}

# ------------------------------------
# INVOKE IMAGE APPLICATIONS
# ------------------------------------

# Determine whether GUI Scripting is enabled, which is needed to automate JPEGmini.
function has_gui_script {
  echo `osascript "$APPLESCRIPT_BIN" supportsAssistiveDevices`
}

# State whether eg node, brew, gem etc is installed
# param   {CliApp}         $1  bin
# return  {BooleanString}      is_installed
function has_imagemagick {
  local is_installed="true"
  type compare >/dev/null 2>&1 || { local is_installed="false"; }
  echo "$is_installed"
}

function has_imageoptim {
  echo `osascript "$APPLESCRIPT_BIN" hasImageOptim`
}

function has_jpegmini {
  echo `osascript "$APPLESCRIPT_BIN" hasJPEGmini`
}

function get_jpegmini_app_name {
  echo `osascript "$APPLESCRIPT_BIN" getJpegMiniAppName`
}

# If enabled and installed, run ImageAlpha on our temp directory
function run_image_alpha {
  if [ "true" == "$USE_IMAGE_ALPHA" ]; then
    info "Running ImageAlpha..."
    local added_options
    if [ "true" == "$SKIP_IF_LARGER" ]; then
      added_options="--skip-if-larger"
    fi
    find "${TEMP_PATH}/png" -type f -print0 | xargs -n10 -P8 -0 "$PNGQUANT_PATH" --ext=.png --force --speed=1 --quality="$MIN_QUALITY"-100 ${added_options} --
  fi
}

# If enabled and installed, run JPEGmini on our temp directory
function run_jpegmini {
  if [ "true" == "$USE_JPEGMINI" ]; then
    if [ "true" == "$HAS_JPEGMINI" ]; then
      if [ "true" != "$HAS_GUI_SCRIPT" ]; then
        fatal "To automate JPEGmini we need to add Terminal.app (or iTerm.app etc) to the 'support for assistive devices' whitelist. Please see README for more details."
      fi
      info "Running ${JPEGMINI_NAME}..."
      local location=`osascript -e "POSIX path of (path to application \"${JPEGMINI_NAME}\")"`
      open "${location}"
      osascript "$APPLESCRIPT_BIN" runJPEGmini
      if [ "true" == "$QUIT_ON_COMPLETE" ]; then
        osascript "$APPLESCRIPT_BIN" quitJPEGmini
      fi
    else
      fatal "JPEGmini is not installed (https://itunes.apple.com/us/app/jpegmini/id498944723)"
    fi
  fi
}

# If enabled and installed, run ImageOptim on our temp directory
function run_image_optim {
  info "Running ImageOptim..."
  # find where imageoptim is installed (opens app)
  local location=`osascript -e 'POSIX path of (path to application "ImageOptim")'`
  # close duplicate app
  osascript "$APPLESCRIPT_BIN" quitImageOptim
  # run images over the app
  "${location}Contents/MacOS/ImageOptim" 2> /dev/null "${TEMP_PATH}"
  if [ "true" == "$QUIT_ON_COMPLETE" ]; then
    osascript "$APPLESCRIPT_BIN" quitImageOptim
  fi
}

# ------------------------------------
# GET AND MANAGE FILE SIZES
# ------------------------------------

# Get the size of a file, in bytes.
# param   {FilePath}  $1  file
# return  {Number}        file_size
function sizeInBytes {
  echo $($STAT_BIN -f %z "$1")
}

# Convert a value in bytes to kilobytes in 3 decimal places, 1b is 0.001kb for example.
# param   {Number}  $1  bytes
# return  {Number}      kilobytes
function toKb {
  echo $(bc <<< "scale=3; $1/1000")
}
