#!/bin/sh

# Copyright © 2013 Jamie Mason, @GotNoSugarBaby,
# https://github.com/JamieMason

# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# current version of ImageOptim-CLI from package.json
version="1.6.19"

# to be set to "stdin" or "directory" based on cli options or piped input
runMode="stdin"

# path to image directory we should optimise
imgPath="false"

# path to this executable
cliPath="false"

# "true"|"false"
useImageOptim="true"
useImageAlpha="false"
useJPEGmini="false"
imageOptimIsRunning="false"

# quit apps after processing images?
quitOnComplete="false"

# how long we will wait before checking again if an app is busy
isBusyIntervalLength=1

# ImageAlpha
imageAlphaFileTypes=".*(png)$"
imageAlphaAppBundleId="net.pornel.ImageAlpha"
imageAlphaAppName="ImageAlpha"
imageAlphaAppFileName="ImageAlpha.app"

# ImageOptim
imageOptimFileTypes=".*(bmp|gif|jpeg|jpg|pcx|png|pnm|tga|tiff)$"
imageOptimAppBundleId="net.pornel.ImageOptim"
imageOptimAppName="ImageOptim"
imageOptimAppFileName="ImageOptim.app"

# JPEGmini
jpegMiniFileTypes=".*(jpg|jpeg)$"
jpegMiniAppBundleId="com.icvt.JPEGmini"
jpegMiniAppRetailBundleId="com.icvt.JPEGmini-retail"
jpegMiniAppName="JPEGmini"
jpegMiniAppFileName="JPEGmini.app"

# see https://github.com/pornel/ImageOptim/issues/24
# the first file to be added is not processed if ImageOptim
# is not already running
function startImageOptim {
  if [ $(countProcesses $imageOptimAppName) -eq 0 ]; then
    echo "ImageOptim not running - starting"
    open -g -a $imageOptimAppFileName
    sleep 1
    imageOptimIsRunning="true"
  fi
}

# ($1:appFileName, $2:imageFilePath):
function addImageToQueue {

  if [[ $imageOptimIsRunning == "false" ]] && [[ "$1" == "$imageOptimAppFileName" ]]; then
    startImageOptim
  fi

  open -g -a $1 "$2"
}

# ($1:fileTypes, $2:appFileName, $3:dirPath): Queue direcory of images
function addDirectoryToQueue {
  find -E "$3" -iregex $1 -print0 | while IFS= read -r -d $'\0' imgPath; do
    addImageToQueue $2 "$imgPath"
  done
}

# ($1:appShouldBeRun, $2:appName, $3:fileTypes, $4:appFileName, $5:dirPath):
function runPornelAppOnDirectory {
  if [ "true" == $1 ]; then
    echo $2
    addDirectoryToQueue $3 $4 "$5"
  fi
}

# ($1:dirPath):
function runImageOptimOnDirectory {
  runPornelAppOnDirectory $useImageOptim $imageOptimAppName $imageOptimFileTypes $imageOptimAppFileName "$1"
}

# ($1:dirPath):
function runImageAlphaOnDirectory {
  if [ "true" == $useImageAlpha ]; then
    echo "ImageAlpha..."
    find -E "$1" -iregex '.*(png)$' -print0 | while IFS= read -r -d $'\0' img; do
      runImageAlphaOnImage "$img"
    done
  fi
}

# ($1:appShouldBeRun, $2:appName, $3:fileTypes, $4:appFileName, $5:image):
function runPornelAppOnImage {
  if [ "true" == $1 ]; then
    addImageToQueue $4 "$5"
  fi
}

# ($1:image):
function runImageOptimOnImage {
  runPornelAppOnImage $useImageOptim $imageOptimAppName $imageOptimFileTypes $imageOptimAppFileName "$1"
}

# ($1:image):
function runImageAlphaOnImage {

  # would like to specify the extension here, but pngquant ignores case
  # if the extension is .PNG, then this command creates a new file
  # the new file is not passed to imageOptim
  # waiting on https://github.com/pornel/pngquant/issues/45
  # fix coming soon: https://github.com/pornel/pngquant/commit/057eb1ee9e9890a74ea363ae367df16feaa4742b
  #extension="${1##*.}"

  /Applications/ImageAlpha.app/Contents/Resources/pngquant --ext=.png --force --speed=1 --quality=75-100 -- "$1"
}

# ($1:path):
function runJPEGmini {
  if [ "true" == $useJPEGmini ]; then
    echo "JPEGmini..."
    `osascript "$cliPath/imageOptimAppleScriptLib" run_jpegmini "$1" $jpegMiniAppName` > /dev/null 2>&1
  fi
}

# ($1:appName): Get the number of processes in use by an Application
function countProcesses {
  printf $(ps -aef | grep  "[${1:0:1}]${1:1}.app" | wc -l)
}

# ($1:appName): Sleep until app is done optimising images
function waitForApp {
  # wait for App to spawn a few processes
  sleep 2
  # wait until those processes have completed
  while [[ $(countProcesses $1) > "1" ]]; do
    sleep $isBusyIntervalLength
  done
}

# ($1:appName):
function waitForPornelApp {
  waitForApp $1
  if [ "true" == $quitOnComplete ]; then
    osascript -e "tell application \"$1\" to quit"
  fi
}

# ():
function waitForImageOptim {
  if [ "true" == $useImageOptim ]; then
    waitForPornelApp $imageOptimAppName
  fi
}

# ():
function waitForJPEGmini {
  if [ "true" == $useJPEGmini ]; then
    sleep 1
    `osascript "$cliPath/imageOptimAppleScriptLib" wait_for $jpegMiniAppName` > /dev/null 2>&1
    if [ "true" == $quitOnComplete ]; then
      osascript -e "tell application \"$jpegMiniAppName\" to quit"
    fi
  fi
}

# (): Display usage information
function usage {
  echo "Usage: imageOptim [options]"
  echo ""
  echo "Options:"
  echo ""
  echo "  -d, --directory     directory of images to process"
  echo "  -a, --image-alpha   pre-process PNGs with ImageAlpha.app *"
  echo "  -j, --jpeg-mini     pre-process JPGs with JPEGmini.app **"
  echo "  -q, --quit          quit all apps when complete"
  echo "  -h, --help          display this usage information"
  echo "  -e, --examples      display some example commands and uses"
  echo "  -v, --version       display the version number"
  echo ""
  echo "*  http://pngmini.com"
  echo "** https://itunes.apple.com/us/app/jpegmini/id498944723"
  echo ""
}

# (): Display usage examples
function examples {
  echo "### Optimise a directory of images"
  echo ""
  echo "This command will optimise all image files in your Awesome project."
  echo ""
  echo "    imageOptim --directory ~/Sites/Awesome # [options]"
  echo ""
  echo "### Optimise a filtered set of images"
  echo ""
  echo "This command will optimise just the .jpg files in your Awesome project."
  echo ""
  echo "    find ~/Sites/Awesome -name '*.jpg' | imageOptim # [options]"
  echo ""
  echo "### Passing additional options"
  echo ""
  echo "The long format for enabling options is as follows;"
  echo ""
  echo "    imageOptim --jpeg-mini --image-alpha --quit --directory path/to/images"
  echo ""
  echo "The equivalent of the above in short format is as follows;"
  echo ""
  echo "    imageOptim -j -a -q -d path/to/images"
  echo ""
  echo "### Adding to git pre-commit hook"
  echo ""
  echo "Adding the below to **your_project/.git/hooks/pre-commit** will run ImageOptim-CLI"
  echo "each time you commit new and changed files into your project. Any files which"
  echo "aren't images will be ignored."
  echo ""
  echo "    git diff --cached --name-only --diff-filter=ACM | imageOptim # [options]"
  echo ""
}

# ($1:message): Display a red error message and quit
function error {
  printf "\e[31m✘ $1"
  echo "\033[0m"
  exit 1
}

# ($1:message): Display a message in green with a tick by it
function success {
  printf "\e[32m✔ ${1}"
  echo "\033[0m"
}

# (): Get a timestamp for the current time
function now {
  date +"%s"
}

# (): How long did ImageOptim.app take to process the images?
function getTimeSpent {
  let timeSpent=endTime-startTime-$isBusyIntervalLength
  echo $timeSpent
}

# ($1:dirPath): How many images are in the directory we're about to process?
function getImgCount {
  echo $(find -E "$1" -iregex $imageOptimFileTypes | wc -l)
}

# ($1:dirPath): The total size of the images in the directory we're about to process
function getImagesSizeTotal {
  # added quotemeta and xargs in case files have spaces/special chars
  echo $(find -E "$1" -iregex $imageOptimFileTypes | perl -lne 'print quotemeta' | xargs ls | du -k | awk '{ print $1}')
}

# ($1:startSize, $2:endSize: Output savings report
function printReport {

  local startSize="${1:-0}"
  local endSize="${2:-0}"
  local saving=$(echo "(1 - ($endSize / $startSize)) * 100" | bc -l | sed -e 's/^\./0./' )

  if [ ${saving/\.*} -gt 0 ]; then
    printf "Optimised %'d KB to %'d KB (saving %2.2f%%)\n" "$startSize" "$endSize" "$saving"
  else
    printf "No savings. Start: %'d KB End: %'d KB\n" "$startSize" "$endSize" 
  fi
}

# (): run applications against a directory of images
function processDirectory {
  startTime=$(now)
  imgCount=$(getImgCount "$imgPath")
  startSize=$(getImagesSizeTotal "$imgPath")
  echo "Processing $imgCount images..."

  runImageAlphaOnDirectory "$imgPath"

  runJPEGmini "$imgPath"
  waitForJPEGmini

  runImageOptimOnDirectory "$imgPath"
  waitForImageOptim

  endSize=$(getImagesSizeTotal "$imgPath")
  printReport "$startSize" "$endSize"

  endTime=$(now)
  success "Finished in $(getTimeSpent) seconds" | xargs
}

# (): run applications against a single image
function processFiles {
  i=0;

  # store piped input so we can iterate over it more than once
  while read LINE; do
    pipedFiles[$i]="${LINE}"
    i=$((i+1))
  done

  echo "Processing $i images..."

  # Case-insensitive pattern matching
  # for use with the =~ Regular Expression matching operator
  # http://tldp.org/LDP/abs/html/bashver3.html#REGEXMATCHREF
  shopt -s nocasematch

  for file in "${pipedFiles[@]}"; do
    if [[ "$file" =~ .*(png)$ ]]; then
      runImageAlphaOnImage "$file"
    fi
  done

  for file in "${pipedFiles[@]}"; do
    if [[ "$file" =~ .*(jpg|jpeg)$ ]]; then
      runJPEGmini "$file"
    fi
  done

  waitForJPEGmini

  for file in "${pipedFiles[@]}"; do
    if [[ "$file" =~ .*(bmp|gif|jpeg|jpg|pcx|png|pnm|tga|tiff)$ ]]; then
      runImageOptimOnImage "$file"
    fi
  done
  
  # unset case-insensitive pattern matching
  shopt -u nocasematch
  
  waitForImageOptim
}

# (): if an override is not set, get path to this executable
function initCliPath {
  if [ "false" == $cliPath ]; then
    cliPath="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  fi
}

# (): quit if -d, --directory does not resolve
function validateImgPath {
  if [ "directory" == $runMode ] && [ ! -d "$imgPath" ]; then
    error "$imgPath is not a directory, or could not be found"
  fi
}

# ($1:appBundleId): eg. "net.pornel.ImageAlpha" -> "ImageAlpha.app" or "NOT_INSTALLED"
function getAppFileNameByBundleId {
  echo `osascript "$cliPath/imageOptimAppleScriptLib" has_app_installed $1`
}

# ($1:appFileName, $2:appBundleId): -> "true" or "false"
function appIsInstalled {
  if [ $1 == $(getAppFileNameByBundleId $2) ]; then
    echo "true"
  else
    echo "false"
  fi
}

# (): -> "true" or "false"
function imageOptimIsInstalled {
  echo $(appIsInstalled $imageOptimAppFileName $imageOptimAppBundleId)
}

# (): -> "true" or "false"
function imageAlphaIsInstalled {
  echo $(appIsInstalled $imageAlphaAppFileName $imageAlphaAppBundleId)
}

# (): -> "true" or "false"
function jpegMiniIsInstalled {
  if [ "true" == $(appIsInstalled $jpegMiniAppFileName $jpegMiniAppBundleId) ] || [ "true" == $(appIsInstalled $jpegMiniAppFileName $jpegMiniAppRetailBundleId) ]; then
    echo "true"
  else
    echo "false"
  fi
}

# (): -> "true" or "false"
function guiScriptIsEnabled {
  echo `osascript "$cliPath/imageOptimAppleScriptLib" has_gui_script`
}

# ($1:appShouldBeRun, $2:appIsInstalled, $3:isNotInstalledMsg):
function errorIfNotInstalled {
  if [ "true" == $1 ] && [ "false" == $2 ]; then
    error "$3"
  fi
}

# (): quit if ImageOptim should be run but is not installed
function validateImageOptim {
  errorIfNotInstalled $useImageOptim $(imageOptimIsInstalled) "$imageOptimAppFileName is not installed (http://imageoptim.com)"
}

# (): quit if ImageAlpha should be run but is not installed
function validateImageAlpha {
  errorIfNotInstalled $useImageAlpha $(imageAlphaIsInstalled) "$imageAlphaAppFileName is not installed (http://pngmini.com)"
}

# (): quit if ImageAlpha should be run but is not installed or cannot run
function validateJpegMini {

  # if we're not running JPEGmini then it's all good
  if [ "false" == $useJPEGmini ]; then
    return 0
  fi

  # if we are and it's not installed
  if [ "false" == $(jpegMiniIsInstalled) ]; then
    error "$jpegMiniAppFileName is not installed (https://itunes.apple.com/us/app/jpegmini/id498944723)"
  fi

  # if we are, it's installed but GUIScript is not available
  if [ "false" == $(guiScriptIsEnabled) ]; then
    error "To automate JPEGmini we need to enable GUI Scripting, check 'Enable access for assistive devices' under Accessibility in System Preferences, then run ImageOptim-CLI again"
  fi

}

# Handle Inputs
while [ "$1" != "" ]; do
  case $1 in
    -d | --directory )
      shift;
      runMode="directory"
      imgPath=$1
      ;;
    -a | --image-alpha )
      useImageAlpha="true"
      ;;
    -j | --jpeg-mini )
      useJPEGmini="true"
      ;;
    -q | --quit )
      quitOnComplete="true"
      ;;
    -h | --help )
      usage;
      exit 0
      ;;
    -e | --examples )
      examples;
      exit 0
      ;;
    -v | --version )
      echo $version;
      exit 0
      ;;
    * )
    usage
    exit 1
  esac
  shift
done

initCliPath
validateImgPath
validateImageOptim
validateImageAlpha
validateJpegMini

if [ "directory" == $runMode ]; then
  processDirectory
elif [ "stdin" == $runMode ]; then
  processFiles
fi
