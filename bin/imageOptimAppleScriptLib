#!/bin/osascript

-- https://raw.githubusercontent.com/JamieMason/LICENSES/master/LICENSE-MIT

global DIRECTORY_GIF
global DIRECTORY_JPG
global DIRECTORY_PNG
global DIRECTORY_TEMP
global ID_IMAGEOPTIM
global ID_JPEGMINI
global ID_JPEGMINI_RETAIL
global ID_JPEGMINI_LITE
global ID_JPEGMINI_LITE_RETAIL
global ID_JPEGMINI_PRO
global ID_JPEGMINI_PRO_RETAIL
global JPEGMINI_APP_NAME

(*
 * @description
 * Is the app with this bundle id installed somewhere on this machine?
 *
 * @param   {String}   bundleId  eg. ID_IMAGEOPTIM
 * @return  {Boolean}
 *)
on isInstalled(bundleId)
  try
    tell application "Finder" to get application file id bundleId
    return true
  on error
    return false
  end try
end isInstalled

(*
 * @description
 * Check whether access for assistive devices is enabled under System
 * Preferences, needed to perform synthetic user actions so JPEGmini can be
 * automated.
 *
 * Enable access for assistive devices in Mavericks;
 * http://www.tekrevue.com/how-to-enable-access-for-assistive-devices-in-os-x-mavericks/
 *
 * Enable access for assistive devices in Yosemite;
 * https://thequantumself.wordpress.com/2014/06/26/enable-access-for-assistive-devices-in-osx-yosmite/
 *
 * @return  {Boolean}
 *)
on supportsAssistiveDevices()
  try
    -- return do shell script "osascript -e 'tell application \"System Events\" to get UI elements enabled'"
    tell application "System Events" to get UI elements enabled
  on error
    return "ERROR_GUISCRIPT_UNREADABLE"
  end try
end supportsAssistiveDevices

(*
 * @description
 * Find the appropriate JPEGmini app name, starting with the paid-for plans
 * down to the free one.
 *
 * @return  {String}  eg. "JPEGmini Pro"
 *)
on getJpegMiniAppName()
  if isInstalled(ID_JPEGMINI_PRO) or isInstalled(ID_JPEGMINI_PRO_RETAIL) then
    return "JPEGmini Pro"
  else if isInstalled(ID_JPEGMINI) or isInstalled(ID_JPEGMINI_RETAIL) then
    return "JPEGmini"
  else if isInstalled(ID_JPEGMINI_LITE) or isInstalled(ID_JPEGMINI_LITE_RETAIL) then
    return "JPEGmini Lite"
  end if
  return "false"
end getJpegMiniAppName

on hasJPEGmini()
  if getJpegMiniAppName() is "false" then
    return false
  else
    return true
  end if
end hasJPEGmini

on hasImageOptim()
  return isInstalled(ID_IMAGEOPTIM)
end hasImageOptim

(*
 * @description
 * Run JPEGmini <variant> over the contents of DIRECTORY_JPG.
 *)
on runJPEGmini()
  (* DETERMINE WHICH VERSION IS INSTALLED *)
  set JPEGMINI_APP_NAME to getJpegMiniAppName()
  (* QUIT IF NOT INSTALLED *)
  if JPEGMINI_APP_NAME is "false" then
    return "ERROR_JPEGMINI_UNAVAILABLE"
  end if
  (* OPEN AND FOCUS JPEGMINI *)
  tell application JPEGMINI_APP_NAME
    activate
    delay 3
    activate
  end tell
  (* SPAWN THE FILE > OPEN MENU *)
  tell application "System Events"
    keystroke "o" using {command down}
    delay 3
    keystroke "g" using {command down, shift down}
    delay 2
  end tell
  (* NAVIGATE TO OUR FOLDER OF IMAGES *)
  tell application "System Events"
    tell process JPEGMINI_APP_NAME
      (* < SIERRA, FILE PATH SELECTOR IS TEXT INPUT *)
      if text field 1 of sheet 1 of sheet 1 of window 1 exists then
        set value of text field 1 of sheet 1 of sheet 1 of window 1 to DIRECTORY_JPG
        repeat
          if (value of text field 1 of sheet 1 of sheet 1 of window 1) is not equal to DIRECTORY_JPG then
            delay 1
          else
            exit repeat
          end if
        end repeat
      end if
      (* = SIERRA, FILE PATH SELECTOR IS COMBO BOX *)
      if combo box 1 of sheet 1 of sheet 1 of window 1 exists then
        set value of combo box 1 of sheet 1 of sheet 1 of window 1 to DIRECTORY_JPG
        repeat
          if (value of combo box 1 of sheet 1 of sheet 1 of window 1) is not equal to DIRECTORY_JPG then
            delay 1
          else
            exit repeat
          end if
        end repeat
      end if
      (* >= HIGH SIERRA *)
      if combo box 1 of sheet 1 of window 1 exists then
        set value of combo box 1 of sheet 1 of window 1 to DIRECTORY_JPG
        repeat
          if (value of combo box 1 of sheet 1 of window 1) is not equal to DIRECTORY_JPG then
            delay 1
          else
            exit repeat
          end if
        end repeat
      end if
      -- give Finder time to resolve the path
      delay 2
      keystroke return
      delay 2
      keystroke return
      -- start optimising (>= Yosemite)
      -- click button "Go" of sheet 1 of window 1
      -- start optimising (<= Mavericks)
      -- click button "Open" of sheet 1 of window 1
    end tell
  end tell
  (* WAIT FOR JPEGMINI TO FINISH RUNNING *)
  tell application "System Events"
    set timesIdle to 0
    repeat
      -- get all process information | filtered to JPEGmini
      set getRawProcess to "ps aux | grep '/Applications/" & JPEGMINI_APP_NAME & "'"
      -- filter out JPEGmini grep | get column 3 of output (% CPU)
      set filterRawProcess to "grep -v grep | awk '{print $3}'"
      -- store above pipe chain in a variable
      set getRawCpu to "RAWCPU=$(" & getRawProcess & " | " & filterRawProcess & ")"
      -- round that variable to a whole number
      set outputRoundedCpu to "$(printf \"%.0f\" $(echo \"scale=2;$RAWCPU\" | bc))"
      -- join the two commands and echo it out to applescript
      set getCpuPercent to getRawCpu & " && echo " & outputRoundedCpu
      -- get raw terminal string output
      set cpuPercent to (do shell script getCpuPercent) as number
      -- give the app a little time to work
      delay 0.5
      -- if the app is idle
      if (cpuPercent) < 1 then
        -- increment number of times we've found the app consecutively idle
        set timesIdle to timesIdle + 1
        -- if it's been idle for long enough we can exit
        if (timesIdle) > 5 then
          exit repeat
        end if
      end if
      -- (implied else: by not exiting we repeat again)
    end repeat
    delay 0.5
  end tell
end runJPEGmini

(*
 * @param  {String}  appName  eg. "ImageOptim"
 *)
on quitApp(appName)
  tell application appName to quit
end quitApp

on quitImageOptim()
  quitApp("ImageOptim")
end runImageOptim

on quitJPEGmini()
  quitApp(getJpegMiniAppName())
end runImageOptim

(*
 * @description
 * Handle command-line arguments.
 *
 * @example
 * ./imageOptimAppleScriptLib "<action>" "<quitAfter>"
 *)
on run argv

  (* INITIALISE GLOBALS *)

  set DIRECTORY_TEMP to (do shell script "echo $TMPDIR") & "imageoptim-cli/"
  set DIRECTORY_GIF to DIRECTORY_TEMP & "gif"
  set DIRECTORY_JPG to DIRECTORY_TEMP & "jpg"
  set DIRECTORY_PNG to DIRECTORY_TEMP & "png"
  set ID_IMAGEOPTIM to "net.pornel.ImageOptim"
  set ID_JPEGMINI to "com.icvt.JPEGmini"
  set ID_JPEGMINI_RETAIL to "com.icvt.JPEGmini-retail"
  set ID_JPEGMINI_LITE to "com.icvt.JPEGminiLite"
  set ID_JPEGMINI_LITE_RETAIL to "com.icvt.JPEGminiLite-retail"
  set ID_JPEGMINI_PRO to "com.icvt.JPEGmini-Pro"
  set ID_JPEGMINI_PRO_RETAIL to "com.icvt.JPEGmini-Pro-retail"

  (* HANDLE COMMAND LINE ARGUMENTS *)

  set action to item 1 of argv

  (* PERFORM ACTION *)

  if action is "quitImageOptim" then
    return quitImageOptim()
  else if action is "quitJPEGmini" then
    return quitJPEGmini()
  else if action is "runJPEGmini" then
    return runJPEGmini()
  else if action is "supportsAssistiveDevices" then
    return supportsAssistiveDevices()
  else if action is "getJpegMiniAppName" then
    return getJpegMiniAppName()
  else if action is "hasJPEGmini" then
    return hasJPEGmini()
  else if action is "hasImageOptim" then
    return hasImageOptim()
  end if

end run
