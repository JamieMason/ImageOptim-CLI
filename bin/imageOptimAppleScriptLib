#!/bin/osascript

-- Copyright © 2013 Jamie Mason, @GotNoSugarBaby,
-- https://github.com/JamieMason

-- Permission is hereby granted, free of charge, to any person
-- obtaining a copy of this software and associated documentation files
-- (the "Software"), to deal in the Software without restriction,
-- including without limitation the rights to use, copy, modify, merge,
-- publish, distribute, sublicense, and/or sell copies of the Software,
-- and to permit persons to whom the Software is furnished to do so,
-- subject to the following conditions:

-- The above copyright notice and this permission notice shall be
-- included in all copies or substantial portions of the Software.

-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-- NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
-- BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
-- ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-- CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-- SOFTWARE.

-- Using the Application's bundle id, get the .app file name if installed
-- eg. "net.pornel.ImageOptim" -> "ImageOptim.app"
on has_app_installed(appFileId)
  try
    tell application "Finder"
      return name of application file id appFileId
    end tell
  on error err_msg number err_num
    return "NOT_INSTALLED"
  end try
end has_app_installed

-- Checks prefs plist for the paid key. Returns true or false
on has_paid_for_jpegmini()
  try
    
    set _username to system attribute "USER"
    if _username is "" then
      set _username to do shell script "whoami"
    end if
    
    if _username is "root" then
      set _username to do shell script "who | grep console | awk '{print $1}'"
    end if
    
    set _fileName to "/Users/" & _username & "/Library/Containers/com.icvt.JPEGminiLite/Data/Library/Preferences/com.icvt.JPEGminiLite.plist"
    set theTmpFile to (path to temporary items as string) & "test.plist"
    
    do shell script "cp " & _fileName & " " & POSIX path of theTmpFile
    do shell script "plutil -convert xml1 " & POSIX path of theTmpFile
    
    set paid to do shell script "cat " & POSIX path of theTmpFile & "| grep -A1 did-upgrade-to-full | grep -v key | sed -E 's/<//g' | sed -E 's/\\/>//g' | xargs"
    
    if (paid is equal to "") then
      set paid to "false"
    end if
    
    return paid
  on error
    return "false"
  end try
end has_paid_for_jpegmini

-- Return true is GUIScript is enabled, or false
on has_gui_script()
  tell application "System Events"
    set isEnabled to UI elements enabled
  end tell
  return isEnabled as boolean
end has_gui_script

-- Feed a folder of images into JPEGmini
on run_jpegmini(imgPath, appName)
  try
    tell application appName

      -- start the app
      activate

      -- let it boot up
      delay 3

      -- ensure it still has focus
      activate

    end tell

    tell application "System Events"
      tell process appName

        -- Navigate to the File > Open menu
        click menu item "Open…" of menu 1 of menu bar item "File" of menu bar 1

        -- let Finder spawn the browse dialog
        delay 1

        -- command+shift+g in Finder lets us enter file paths direct
        --keystroke "g" using {command down, shift down}
         -- shift-cmd-g doesn't work on my machine, or maybe just with JPEGmini Lite
        keystroke "/"
        -- window is called JPEGmini even in the Lite app
        set value of text field 1 of sheet 1 of sheet 1 of window "JPEGmini" to imgPath

        delay 1

        -- and navigate to it
        keystroke return

        -- let Finder resolve the path
        delay 1

        -- start JPEGmini off optimising the folder
        click button "Open" of sheet 1 of window "JPEGmini" -- window is called JPEGmini even in the Lite app

        -- report success
        return true

      end tell
    end tell

    -- report success
    return true

    on error error_message

      -- report failure
      return false

  end try
end run_jpegmini

-- Watch app until it's finished working with our folder
on wait_for(processName)
  tell application "System Events"
    repeat

      -- get a process id we can pass to `ps`
      set PID to unix id of process processName

      -- filter active process output to just JPEGmini, then to just the % CPU
      set getCpuPercent to "ps aux | grep " & PID & " | grep -v grep | awk '{print $3}'"

      -- convert the terminal's string output to a number
      set cpuPercent to (do shell script getCpuPercent)
      round cpuPercent rounding toward zero

      -- give the app a little time to work
      delay 2

      -- if the app is idle
      if (cpuPercent) < 1 then

        -- we think it's finished
        exit repeat

      end if

      -- (implied else: by not exiting we repeat again)

    end repeat
  end tell
end wait_for

-- handle input from terminal
on run argv

  -- the first option should always be the command to run
  set command to item 1 of argv

  -- in the case of JPEGmini, we need to know if GUIScript is enabled...
  if command is "has_app_installed" then

    -- we expect the 2nd argument to be the application's bundle id
    return has_app_installed(item 2 of argv)

  -- in the case of JPEGmini
  else if command is "has_gui_script" then

    -- we need to know if GUIScript is enabled
    return has_gui_script()

  -- process a directory using JPEGmini
  else if command is "run_jpegmini" then

    -- we expect the 2nd argument to be the path
    -- we expect the 3rd argument to be the app name
    -- optimise the directory of images
    run_jpegmini(item 2 of argv, item 3 of argv)

  -- wait for an app to finish running
  else if command is "wait_for" then

    -- we expect the 2nd argument to be the app name
    -- keep the shell script waiting until the app has finished
    wait_for(item 2 of argv)

   -- Check prefs plist for the paid key
  else if command is "has_paid_for_jpegmini" then
    return has_paid_for_jpegmini()
  end if
end run
