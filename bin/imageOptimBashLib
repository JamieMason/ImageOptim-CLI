#!/bin/bash

# Copyright © 2013 Jamie Mason, @GotNoSugarBaby,
# https://github.com/JamieMason

# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# ------------------------------------
# DEFAULT / ENVIRONMENT VARIABLES
# ------------------------------------

# current version of ImageOptim-CLI from package.json
VERSION="1.7.3"

# {DirectoryPath} Absolute file system path to this shell script.
CLI_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# {DirectoryPath} Absolute file system path to where this shell script was invoked from.
EXEC_PATH="$PWD"

# {FilePath} The location of our Applescript library file.
APPLESCRIPT_BIN="$CLI_PATH/imageOptimAppleScriptLib"

# {FilePath} The location of stat (see issue #59 with stat & homebrew)
STAT_BIN="/usr/bin/stat"

# {DirectoryPath} Where we'll copy all images to be processed, compared, then returned to their
# original locations.
TEMP_PATH="${TMPDIR}imageoptim-cli"

# {FilePath} A list of all images we'll be operating on.
INDEX_FILE="${TEMP_PATH}/index.txt"

# {FilePath[]} The original locations of every image to be processed.
INDEX_ARRAY=[]

# {Number} How many images in total being processed.
TOTAL_IMAGES=0

# {DirectoryPath|String} The optionally provided -d or --directory command line argument.
DIRECTORY_OPTION="false"

# {BooleanString} Optionally overridden with -a or --image-alpha.
USE_IMAGE_ALPHA="false"

# {BooleanString} Optionally overridden with -j or --jpeg-mini.
USE_JPEGMINI="false"

# {BooleanString} Optionally overridden with -q or --quit.
QUIT_ON_COMPLETE="false"

# {RegEx} Supported file extensions for each application.
FILE_TYPES_REGEX_IMAGE_ALPHA=".*(png)$"
FILE_TYPES_REGEX_IMAGE_OPTIM=".*(bmp|gif|jpeg|jpg|pcx|png|pnm|tga|tiff)$"
FILE_TYPES_REGEX_JPEGMINI=".*(jpg|jpeg)$"

# {FilePath} Location of pngquant executable within ImageAlpha.
PNGQUANT_PATH="/Applications/ImageAlpha.app/Contents/Resources/pngquant"

# {FilePath} Location of executable within ImageOptim.
IMAGEOPTIM_BIN_PATH="/Applications/ImageOptim.app/Contents/MacOS/ImageOptim"

# {String} The OS X file names for each Application.
APP_FILENAME_IMAGE_ALPHA="ImageAlpha.app"
APP_FILENAME_IMAGE_OPTIM="ImageOptim.app"
APP_FILENAME_JPEGMINI="JPEGmini.app"

# {String} The OS X Bundle IDs for each Application.
APP_BUNDLE_ID_IMAGE_ALPHA="net.pornel.ImageAlpha"
APP_BUNDLE_ID_IMAGE_OPTIM="net.pornel.ImageOptim"
APP_BUNDLE_ID_JPEGMINI="com.icvt.JPEGmini"
APP_BUNDLE_ID_JPEGMINI_LITE="com.icvt.JPEGmini-lite"
APP_BUNDLE_ID_JPEGMINI_RETAIL="com.icvt.JPEGmini-retail"

# {BooleanString} Whether each Application is installed, these will be set to true accordingly
# during initialisation.
HAS_IMAGE_ALPHA="false"
HAS_IMAGE_OPTIM="false"
HAS_JPEGMINI="false"
HAS_JPEGMINI_LITE="false"
HAS_JPEGMINI_RETAIL="false"
HAS_IMAGEMAGICK="false"

# {BooleanString} Whether GUI Scripting is enabled, which is needed to robotically control OS X in
# order to automate JPEGmini, which offers no command line access. This will be set to true
# accordingly during initialisation.
HAS_GUI_SCRIPT="false"

# ------------------------------------
# LOGGING UTILS
# ------------------------------------

# Display a red error message and quit
# param  {String}  $1  message
function fatal {
  printf "\e[31m✘ $1"
  echo "\033[0m"
  exit 1
}

# Display a message in green with a tick by it
# param  {String}  $1  message
function success {
  printf "\e[32m✔ $1"
  echo "\033[0m"
}

# Display an info message
# param  {String}  $1  message
function info {
  printf "\e[90m$1\e[39m\n"
}

# Display a message in green
# param  {String}  $1  message
function format_green {
  echo "\e[32m$1\e[39m"
}

# Display a message in red
# param  {String}  $1  message
function format_red {
  echo "\e[31m$1\e[39m"
}

# Display usage information
function usage {
  echo "Usage: imageOptim [options]"
  echo ""
  echo "Options:"
  echo ""
  echo "  -d, --directory     directory of images to process"
  echo "  -a, --image-alpha   pre-process PNGs with ImageAlpha.app *"
  echo "  -j, --jpeg-mini     pre-process JPGs with JPEGmini.app **"
  echo "  -q, --quit          quit all apps when complete"
  echo "  -h, --help          display this usage information"
  echo "  -e, --examples      display some example commands and uses"
  echo "  -v, --version       display the version number"
  echo ""
  echo "*  http://pngmini.com"
  echo "** https://itunes.apple.com/us/app/jpegmini/id498944723"
  echo ""
}

# Display usage examples
function examples {
  echo "### Optimise a directory of images"
  echo ""
  echo "This command will optimise all image files in your Awesome project."
  echo ""
  echo "    imageOptim --directory ~/Sites/Awesome # [options]"
  echo ""
  echo "### Optimise a filtered set of images"
  echo ""
  echo "This command will optimise just the .jpg files in your Awesome project."
  echo ""
  echo "    find ~/Sites/Awesome -name '*.jpg' | imageOptim # [options]"
  echo ""
  echo "### Passing additional options"
  echo ""
  echo "The long format for enabling options is as follows;"
  echo ""
  echo "    imageOptim --jpeg-mini --image-alpha --quit --directory path/to/images"
  echo ""
  echo "The equivalent of the above in short format is as follows;"
  echo ""
  echo "    imageOptim -j -a -q -d path/to/images"
  echo ""
  echo "### Adding to git pre-commit hook"
  echo ""
  echo "Adding the below to **your_project/.git/hooks/pre-commit** will run ImageOptim-CLI"
  echo "each time you commit new and changed files into your project. Any files which"
  echo "aren't images will be ignored."
  echo ""
  echo "    git diff --cached --name-only --diff-filter=ACM | imageOptim # [options]"
  echo ""
}

# Display the before/after result of a file
# param  {String}  $1  label
# param  {Number}  $2  size_before
# param  {Number}  $3  size_after
# param  {Number}  $4  quality_loss
function render_result {
  let local savings=$2-$3
  local savings_percent=$(bc <<< "scale=2; $savings/$2 * 100")
  local size_before=$(format_red "$(toKb $2)kb")
  local size_after=$(format_green "$(toKb $3)kb")
  local savings=$(format_green "$(toKb $savings)kb")
  local savings_percent=$(format_green "$savings_percent%%")
  local quality_loss=$(bc <<< "scale=2; 100-$4")
  local quality_loss=$(format_green "$quality_loss%%")
  local output="$1 was: $size_before now: $size_after saving: $savings ($savings_percent)"
  if [[ $HAS_IMAGEMAGICK != "false" ]]; then
    local output="$output quality: $quality_loss"
  fi
  printf "$output\n"
}

# Display the before/after results of all files
function output_savings {
  local total_before=0
  local total_after=0
  local perfect_quality=0
  local actual_quality=0
  for source_file in "${INDEX_ARRAY[@]}"; do
    local image_type=$(get_image_type "$source_file")
    if [[ $image_type != "unsupported" ]]; then
      local temp_file=$(get_temp_path_for_file "$source_file")
      local size_before=$(sizeInBytes "$source_file")
      local size_after=$(sizeInBytes "$temp_file")
      let local total_before=$total_before+$size_before
      let local total_after=$total_after+$size_after
      local perfect_quality=$(bc <<< "scale=2; $perfect_quality+100")
      local quality_loss="false"
      if [[ $HAS_IMAGEMAGICK == "true" ]]; then
        local quality_loss=$(compare -metric MSE "$source_file" "$temp_file" /dev/null 2>&1 >/dev/null | awk '{print $1}')
        local actual_quality=$(bc <<< "scale=2; $actual_quality+$quality_loss")
      fi
      render_result "$source_file" $size_before $size_after $quality_loss
    fi
  done
  render_result "TOTAL" $total_before $total_after $quality_loss
}

# ------------------------------------
# DETERMINE WHAT EXISTS AT A GIVEN LOCATION
# ------------------------------------

# State whether eg node, brew, gem etc is installed
# param   {CliApp}         $1  bin
# return  {BooleanString}      is_installed
function bin_is_installed {
  local is_installed="true"
  type $1 >/dev/null 2>&1 || { local is_installed="false"; }
  echo "$is_installed"
}

# State whether the entity at path is a "file", "directory", or "other".
# param   {EntityPath}  $1  entity
# return  {String}          file_type
function get_entity_type {
  if [ -f "$1" ]; then
    echo "file"
  elif [ -d "$1" ]; then
    echo "directory"
  else
    echo "other"
  fi
}

# State whether the entity at path is a "png", "jpg", "other", or "unsupported" image file.
# param   {EntityPath}  $1  entity
# return  {String}          image_type
function get_image_type {
  shopt -s nocasematch
  if [[ "$1" =~ $FILE_TYPES_REGEX_IMAGE_ALPHA ]]; then
    echo "png"
  elif [[ "$1" =~ $FILE_TYPES_REGEX_JPEGMINI ]]; then
    echo "jpg"
  elif [[ "$1" =~ $FILE_TYPES_REGEX_IMAGE_OPTIM ]]; then
    echo "other"
  else
    echo "unsupported"
  fi
  shopt -u nocasematch
}

# ------------------------------------
# GATHER PATHS TO IMAGES
# ------------------------------------

# Add file received via stdin to our index file.
# param  {FilePath}  $1  file
function add_file_to_index {
  local image_type=$(get_image_type "$1")
  if [ $image_type != "unsupported" ]; then
    echo "$1" >> $INDEX_FILE
  else
    info "Ignored as an unsupported file type: $LINE"
  fi
}

# Add all files in a directory to our index file.
# param  {DirectoryPath}  $1  directory
function add_directory_to_index {
  find -E "$1" -iregex $FILE_TYPES_REGEX_IMAGE_OPTIM -type f -print0 | while read -d '' -r file; do
    add_file_to_index "$file"
  done
}

# Read files received via stdin into an index which will outlive the LINE variable.
function add_stdin_to_index {
  if [ "$DIRECTORY_OPTION" == "false" ]; then
    while read LINE; do
      local entity_type=$(get_entity_type "$LINE")
      if [ $entity_type == "file" ]; then
        add_file_to_index "$LINE"
      elif [ $entity_type == "directory" ]; then
        add_directory_to_index "$LINE"
      else
        info "Ignored as neither file or directory: $LINE"
      fi
    done
  fi
}

# If -d or --directory were supplied, add the contents of that directory to our processing index.
function add_directory_option_to_index {
  if [ "$DIRECTORY_OPTION" != "false" ]; then
    if [ -d "$DIRECTORY_OPTION" ]; then
      add_directory_to_index "$DIRECTORY_OPTION"
    else
      info "Value for --directory is not a directory: $LINE"
    fi
  fi
}

# Remove any duplicate files in our index, which may have occurred when importing directories whose
# images have already been gathered by other means.
function remove_duplicate_indexes {
  sort -f "$INDEX_FILE" | uniq > "$INDEX_FILE.uniq.txt"
  mv "$INDEX_FILE.uniq.txt" "$INDEX_FILE"
}

# Read our index file into an Array.
function parse_index {
  IFS=$'\n' read -d '' -r -a INDEX_ARRAY < "$INDEX_FILE"
  TOTAL_IMAGES=${#INDEX_ARRAY[@]}
}

# Construct a clean Array containing sorted, unique paths to every image we should process.
function gather_paths_to_images {
  add_stdin_to_index
  add_directory_option_to_index
  remove_duplicate_indexes
  parse_index
}

# ------------------------------------
# PREPARE A TEMPORARY DIRECTORY
# ------------------------------------

# Automating JPEGmini is particularily difficult and unusably slow when working with arbitrary sets
# of files. Instead, we create a temporary directory and pass that once to JPEGmini rather than
# each file individually.
function init_temp_directory {
  rm -rf "$TEMP_PATH"
  mkdir -p -m 777 "$TEMP_PATH"
}

# Determine the location in our temp directory a given file should be held at.
# param   {FilePath}  $1  file
# return  {FilePath}      temp_file
function get_temp_path_for_file {
  local image_type=$(get_image_type "$1")
  echo "${TEMP_PATH}/${image_type}$1"
}

# Copy all files received to a temp directory, grouped by file extension.
function populate_temp_directories {
  local image_type
  local temp_file
  for source_file in "${INDEX_ARRAY[@]}"; do
    image_type=$(get_image_type "$source_file")
    temp_file=$(get_temp_path_for_file "$source_file")
    if [[ $image_type != "unsupported" ]]; then
      ditto "$source_file" "$temp_file"
    fi
  done
}

# @TODO: DRY these two methods

# Copy all files received back to their original locations.
function replace_originals {
  local image_type
  local temp_file
  for source_file in "${INDEX_ARRAY[@]}"; do
    image_type=$(get_image_type "$source_file")
    temp_file=$(get_temp_path_for_file "$source_file")
    if [[ $image_type != "unsupported" ]]; then
      ditto "$temp_file" "$source_file"
      rm "$temp_file"
    fi
  done
}

# Gather paths to all images we should process and prepare a temporary directory containing copies.
function prepare_images {
  gather_paths_to_images
  if [ $TOTAL_IMAGES -gt 0 ]; then
    populate_temp_directories
  fi
}

# ------------------------------------
# INSPECT IMAGE APPLICATIONS
# ------------------------------------

# Use an Application's bundle id to locate the path to the installed Application.
# param   {String}  $1  app_bundle_id
# return  {String}  $1  path_to_app
function get_path_to_app_by_bundle_id {
  echo `osascript "$APPLESCRIPT_BIN" has_app_installed "$1"`
}

# Is an Application at path_to_app with the expected app_bundle_id installed on this machine?
# param   {String}  $1  path_to_app
# param   {String}  $2  app_bundle_id
# return  {BooleanString}
function has_app {
  local expected_app_name="$1"
  local actual_app_name=$(get_path_to_app_by_bundle_id "$2")
  if [ $actual_app_name == $expected_app_name ]; then
    echo "true"
  else
    echo "false"
  fi
}

# Determine whether GUI Scripting is enabled, which is needed to automate JPEGmini.
function has_gui_script {
  echo `osascript "$APPLESCRIPT_BIN" has_gui_script`
}

# ------------------------------------
# INVOKE IMAGE APPLICATIONS
# ------------------------------------

# If enabled and installed, run ImageAlpha on our temp directory
function run_image_alpha {
  if [ "true" == $USE_IMAGE_ALPHA ]; then
    if [ "true" == $HAS_IMAGE_ALPHA ]; then
      info "Running ImageAlpha..."
      find "${TEMP_PATH}/png" -type f -print0 | xargs -n10 -P8 -0 \
      $PNGQUANT_PATH --ext=.png --force --speed=1 --quality=75-100 --
    else
      fatal "ImageAlpha is not installed (http://pngmini.com)"
    fi
  fi
}

# If enabled and installed, run JPEGmini on our temp directory
function run_jpegmini {
  if [ "true" == $USE_JPEGMINI ]; then
    if [ "true" == $HAS_JPEGMINI ] || [ "true" == $HAS_JPEGMINI_RETAIL ]; then
      if [ "true" == $HAS_GUI_SCRIPT ]; then
        info "Running JPEGmini..."
        `osascript "$APPLESCRIPT_BIN" run_jpegmini "${TEMP_PATH}/jpg" JPEGmini` > /dev/null 2>&1
        `osascript "$APPLESCRIPT_BIN" wait_for JPEGmini` > /dev/null 2>&1
        if [ "true" == $QUIT_ON_COMPLETE ]; then
          osascript -e 'tell application "JPEGmini" to quit'
        fi
      else
        fatal "To automate JPEGmini we need to enable GUI Scripting. Check 'Enable access for \
        assistive devices' under Accessibility in System Preferences, then run ImageOptim-CLI again"
      fi
    else
      fatal "JPEGmini is not installed (https://itunes.apple.com/us/app/jpegmini/id498944723)"
    fi
  fi
}

# If enabled and installed, run ImageOptim on our temp directory
function run_image_optim {
  if [ "true" == $HAS_IMAGE_OPTIM ]; then
    info "Running ImageOptim..."
    $IMAGEOPTIM_BIN_PATH 2> /dev/null "$TEMP_PATH"
  else
    fatal "ImageOptim is not installed (http://imageoptim.com)"
  fi
}

# ------------------------------------
# GET AND MANAGE FILE SIZES
# ------------------------------------

# Get the size of a file, in bytes.
# param   {FilePath}  $1  file
# return  {Number}        file_size
function sizeInBytes {
  echo $($STAT_BIN -f %z "$1")
}

# Convert a value in bytes to kilobytes in 3 decimal places, 1b is 0.001kb for example.
# param   {Number}  $1  bytes
# return  {Number}      kilobytes
function toKb {
  echo $(bc <<< "scale=3; $1/1000")
}
